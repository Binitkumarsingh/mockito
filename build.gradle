apply plugin: 'java'

version = '1.9.8'

sourceCompatibility = 1.5

configurations {
    provided
}

sourceSets {
    main {
        java.srcDir 'src'
        compileClasspath = compileClasspath + configurations.provided
    }
    test {
        java.srcDir 'test'
        compileClasspath = compileClasspath + configurations.provided
    }
}

tasks.withType(Compile) {
    options.warnings = false
}

dependencies {
    provided fileTree('lib/compile')
    compile fileTree('lib/run') { exclude '*.txt' }, fileTree('lib/repackaged') { exclude '*.txt'}
    testCompile fileTree('lib/test')
    testRuntime fileTree('lib/compile')
}

def commonJarContent = copySpec {
    //source
    from(sourceSets.main.allSource)

    //mockito license
    from(".") { include 'LICENSE', 'NOTICE' }
    //repackaged license
    from("lib/repackaged") { exclude '**/*.jar' }
    //repackaged classes
    from(zipTree("lib/repackaged/cglib-and-asm-1.0.jar")) {
        exclude 'META-INF/MANIFEST.MF'
    }
}

jar {
    baseName = 'mockito-core'
    with commonJarContent
}

task allJar(type: Jar) {
    baseName = 'mockito-all'

    with commonJarContent

    //classes
    from(sourceSets.main.output)

    //3rd party library classes
    from(zipTree("lib/run/com.springsource.org.objenesis-1.0.0.jar")) { exclude "META-INF/maven/**" }
    from(zipTree("lib/run/com.springsource.org.hamcrest.core-1.1.0.jar")) { exclude "LICENSE.txt" }

    //3rd party license files
    from("lib/run") { exclude '**/*.jar' }
}

artifacts {
    archives allJar
}

task osgifyManifests(type: Exec) {
    commandLine 'ant', '-f', 'build-ant.xml', 'osgifyManifests'
}

osgifyManifests.dependsOn tasks.withType(Jar)
assemble.dependsOn osgifyManifests

/*
repositories {
    mavenCentral()
}

apply plugin: 'pmd'

pmd {
    ruleSetFiles = files('conf/pmd-rules.xml')
}
*/